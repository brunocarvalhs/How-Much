name: Android CI/CD Pipeline

# Dispara em push para develop ou PR
on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

# Variáveis de ambiente globais
env:
  JDK_VERSION: 17
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true -Xmx3072m"
  ANDROID_LOCAL_PROPERTIES: local.properties
  BUILD_TOOLS_VERSION: "34.0.0"

  # Projeto (parametrize por projeto)
  APP_NAME: "HowMuch"
  ANDROID_MODULE: "app"
  APK_DEBUG_PATH: app/build/outputs/apk/debug/*.apk
  APK_RELEASE_PATH: app/build/outputs/apk/release/*.apk

  # Secrets (genéricos para qualquer projeto)
  GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
  FIREBASE_AUTH_TOKEN: ${{ secrets.FIREBASE_AUTH_TOKEN }}
  FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}

jobs:
  # ========================
  # Setup e checkout
  # ========================
  setup:
    runs-on: ubuntu-24.04
    outputs:
      cache-key: ${{ steps.cache-gradle.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JDK_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Create local.properties
        run: echo "sdk.dir=${{ env.ANDROID_HOME }}" > ${{ env.ANDROID_LOCAL_PROPERTIES }}

      - name: Create google-services.json
        run: echo ${{ env.GOOGLE_SERVICE_JSON }} | base64 --decode > ${{ env.ANDROID_MODULE }}/google-services.json

      - name: Cache Gradle
        id: cache-gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

  # ========================
  # Jobs de verificação (paralelos)
  # ========================
  tests:
    needs: setup
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        task: [unit-test, lint, detekt]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Run task
        run: |
          if [ "${{ matrix.task }}" == "unit-test" ]; then
            ./gradlew testDebug --build-cache
          elif [ "${{ matrix.task }}" == "lint" ]; then
            ./gradlew lintDebug
          elif [ "${{ matrix.task }}" == "detekt" ]; then
            ./gradlew detekt
          fi
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}

  # ========================
  # Build APK
  # ========================
  build:
    needs: tests
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Give execution permissions to gradlew
        run: chmod +x gradlew

      - name: Build APK Debug
        run: ./gradlew assembleDebug --build-cache

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-apk-debug
          path: ${{ env.APK_DEBUG_PATH }}

  # ========================
  # Deploy para Firebase
  # ========================
  deploy:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-apk-debug
          path: ${{ env.ANDROID_MODULE }}/build/outputs/apk/debug/

      - name: Install Firebase CLI
        run: curl -sL https://firebase.tools | bash

      - name: Deploy to Firebase App Distribution
        run: |
          firebase appdistribution:distribute ${{ env.APK_DEBUG_PATH }} \
            --app "${{ env.FIREBASE_APP_ID }}" \
            --release-notes "Automated release" \
            --token "${{ env.FIREBASE_AUTH_TOKEN }}"
